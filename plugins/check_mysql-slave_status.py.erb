#!/usr/bin/env python
#
# Generated by Chef
#
"""
Created on Tue May 3 11:02:47 EEST 2017
Author: Maksym Dolgykh

This script checks replication status. It reads Exec_Master_Log_Pos on the slave and Position on the master server, calculates differece and prints out a result
https://nagios-plugins.org/doc/guidelines.html#PLUGOUTPUT
"""

import argparse
import MySQLdb

username="repl"
# --- these 2 variable should be generated by chef
password="<%= node['mysql']['server_repl_password'] %>"
slave_ip="<%= node['network']['interfaces']["#{node['nagios']['server']['monitored_client_interface']}"][:addresses].detect{|k,v| v[:family] == "inet" }.first %>"
#----------------


def get_status(cursor, role):
  cursor.execute("show %s status" % role)
  # fetchallDict() return tuple where each record is a dictionary
  t = c.fetchallDict()
  if len(t) == 0:
    return -1
  else:
    return t[0]


# Parse command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-w", type=int, metavar="WARNING", default=500, help="WARNING value, default 500")
parser.add_argument("-c", type=int, metavar="CRIT", default=1000, help="CRITICAL value, default 1000")
args = parser.parse_args()

# create MySQL connection with local server (slave)
try:
  db=MySQLdb.connect(host=slave_ip, passwd=password, user=username)
  c=db.cursor(MySQLdb.cursors.DictCursor)
except:
  print("UNKNOWN: cannot connect to %s" % slave_ip)
  quit(3);


slave_status=get_status(c, "slave")
if slave_status == -1:
  print("CRITICAL: replication is not enabled on host %s" % slave_ip)
  quit(2);
elif slave_status['Slave_IO_Running'] != "Yes":
  print("CRITICAL: Slave IO is not running on host %s" % slave_ip)
  quit(2);
elif slave_status['Slave_SQL_Running'] != "Yes":
  print("CRITICAL: Slave SQL is not running on host %s" % slave_ip)
  quit(2);
else:
  master_ip=slave_status['Master_Host']

# close connection with MySQL at slave (local) server
db.close()

# create MySQL connection with master server
try:
  db=MySQLdb.connect(host=master_ip, passwd=password, user=username)
  c=db.cursor(MySQLdb.cursors.DictCursor)
except:
  print("UNKNOWN: cannot connect to %s" % master_ip)
  quit(3);

# get master status
master_status=get_status(c, "master")
if master_status == -1:
  print("UNKNOWN: can get master status on host %s" % master_ip)
  quit(3);

# close connection with master
db.close()

diff=master_status['Position'] - slave_status['Exec_Master_Log_Pos']
msg="Master: %s, File: %s; Slave: %s, Read master file: %s; Diff: %d" % (master_ip, master_status['File'], slave_ip, slave_status['Master_Log_File'], diff)

if (master_status['File'] != slave_status['Master_Log_File']):
  print("CRITICAL: %s" %msg)
  quit(2)
elif (diff >= args.c):
  print("CRITICAL: %s" %msg)
  quit(2)
elif (diff >= args.w):
  print("WARNING: %s" %msg)
  quit(1)

print("OK: %s" %msg)
quit(0)

