#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Tue May 16 14:46:15 2017

@author: Maksym Dolgykh

This script checks mongodb replicaset status.
https://docs.mongodb.com/manual/core/replica-set-architectures/
https://docs.mongodb.com/manual/reference/replica-states/

It is supposed to run this check on the mongodb server via nrpe_check
https://nagios-plugins.org/doc/guidelines.html#PLUGOUTPUT
"""

import sys
import argparse
import pandas as pd
import pymongo
import datetime

# exit states
STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3

# calculate lag for replicaset member
def getReplLag(member):
  timedelta = (datetime.datetime.utcnow() - member['optimeDate']).seconds
  return timedelta

# Parse command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-w", type=int, metavar="WARNING", default=350, help="WARNING value, default 350")
parser.add_argument("-c", type=int, metavar="CRITICAL", default=600, help="CRITICAL value, default 600")
args = parser.parse_args()

host="localhost"
# --- these variable should be generated by chef, based on the number of servers within chef role
port= <%= @mongodb_port %>
# number of servers having mongodb role in chef
mongodb_servers_count=<%= @mongodb_servers_count %>
#----------------

# make a connection with mongodb
try:
  conn = pymongo.MongoClient(host, port)
except:
  print("UNKNOWN: cannot connect to mongodb at %s" % host)
  sys.exit(STATE_UNKNOWN)

# get the status of replicaset
rs_status = conn.admin.command('replSetGetStatus')

# close connection
conn.close()

# load members to the dataframe for the further quering
members = pd.DataFrame(rs_status['members'])

# check the number of servers in the replicaset and match it with the number of servers in the chef role
# if replicaset size is less than number of teh servers in the role, this might be a sign that some 
# server(s) was not deployed or something like this. 
# It is possible to see this error while the new server(s) is being deployed but deployment is not finished yet.
replicaset_size = len(members)
if (replicaset_size != mongodb_servers_count):
  print("UNKNOWN: number of replicaset members ( which is %d ) doesn't match number of mongodb servers - %d" % (replicaset_size, mongodb_servers_count))
  sys.exit(STATE_UNKNOWN)

# check if there is a PRIMARY in the replicaset
if len(members[members['state'] == 1]) != 1:
  print("CRITICAL: there is no active PRIMARY in the replicaset")
  sys.exit(STATE_CRITICAL)

# check if there are enough active (primary and secondary servers) in the replicaset
num_active_servers = len(members[(members['state'] == 1) | (members['state'] == 2)])
if num_active_servers < mongodb_servers_count:
  if num_active_servers > mongodb_servers_count/2:
    msg = ''
    # some servers are not online but there are enough servers to build majority
    inactive_members = members[(members['state'] != 1) & (members['state'] != 2)]
    msg = 'WARNING: There are enough mongodb serevrs online but there are %d DOWN. \n' % len(inactive_members)
    for i in range(len(inactive_members)):
      msg += 'Server '+ inactive_members.iloc[i]['name'] + ' is '+ inactive_members.iloc[i]['stateStr']+'. '
    print(msg)
    sys.exit(STATE_WARNING)
  else:
    print('CRITICAL: there are not enough mongodb servers online to build a majority')
    sys.exit(STATE_CRITICAL)

## check replication lag for SECONDARYs
msg = ''
alert = ''
secondary = members[members['state'] == 2]
for server in range(len(secondary)):
  if getReplLag(secondary.iloc[server]) > args.c:
    alert = 'CRITICAL'
    msg += secondary.iloc[server]['name'] + " is " + str(getReplLag(secondary.iloc[server])) + " seconds behind the PRIMARY. \n"
    continue
  if getReplLag(secondary.iloc[server]) > args.w:
    if alert != 'CRITICAL':
        alert = 'WARNING'
    msg += secondary.iloc[server]['name'] + " is "+ str(getReplLag(secondary.iloc[server])) + " seconds behind the PRIMARY. \n"

if alert == 'CRITICAL':
  print(alert + ": \n" + msg)
  sys.exit(STATE_CRITICAL)
elif alert == 'WARNING':
  print(alert + ": \n" + msg)
  sys.exit(STATE_WARNING)
    
print("OK: all servers are online and synced")
sys.exit(STATE_OK)
